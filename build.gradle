plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
    id "io.freefair.lombok" version "6.4.2"
    id("org.gradle.test-retry") version "1.5.3"
}

group 'com.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    selenideVersion = '6.17.0'
    selenideProxy = '6.17.0'
    assertjVersion = '3.24.2'
    junitJupiterVersion = '5.9.3'
    hamcrest = '2.2'
    allureSelenideVersion = '2.20.0'
    slf4jVersion = '2.0.5'
    javafakerVersion = '1.0.2'
    icu4j = '51.1'
    SMSActivateApiVersion = '1.5.9'
    restassured = '5.3.0'
    awaitility = '4.2.0'
    pdfTest = '1.8.0'
    pdfbox = '3.0.0-RC1'
    jacksonCore = '2.15.1'
    jacksonDatabind = '2.15.1'
    jsonPath = '2.4.0'
    jsonSimple = '1.1.1'
    orgJson = '20230227'
    annotationsVersion = '23.0.0'
    jsonassertVersion = '1.5.0'
    commonsIoVersion = '1.3.2'
}

sourceCompatibility = '11'
targetCompatibility = '11'

allure {
    report {
        version.set("2.20.0")
    }

    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set("2.20.0")
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


dependencies {
    implementation "com.codeborne:selenide-proxy:${selenideProxy}"

    testImplementation(
            "com.ibm.icu:icu4j:${icu4j}",
            "com.codeborne:selenide:${selenideVersion}",
            "io.qameta.allure:allure-selenide:${allureSelenideVersion}",
            "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}",
            "org.slf4j:slf4j-simple:${slf4jVersion}",
            "ru.sms-activate:SMSActivateApi:${SMSActivateApiVersion}",
            "io.rest-assured:rest-assured:${restassured}",
            "com.github.javafaker:javafaker:${javafakerVersion}",
            "com.codeborne:pdf-test:${pdfTest}",
            "org.assertj:assertj-core:${assertjVersion}",
            "org.hamcrest:hamcrest:${hamcrest}",
            "org.awaitility:awaitility:${awaitility}",
            "com.fasterxml.jackson.core:jackson-core:${jacksonCore}",
            "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabind}",
            "com.jayway.jsonpath:json-path:${jsonPath}",
            "com.googlecode.json-simple:json-simple:${jsonSimple}",
            "org.json:json:${orgJson}",
            "org.jetbrains:annotations:${annotationsVersion}",
            "org.skyscreamer:jsonassert:${jsonassertVersion}",
            "org.apache.commons:commons-io:${commonsIoVersion}",
            "org.apache.commons:commons-text:1.9"
    )
}

test {
    useJUnitPlatform()
    testLogging {
        events "started", "skipped", "failed", "standard_error", "standard_out"
        exceptionFormat "short"
    }
    retry {
        maxRetries = 2
        failOnPassedAfterRetry = false
    }
}

/*task registrationTest(type: Test) {
    useJUnitPlatform {
        includeTags "registration"
    }
}*/ //todo need to be segmented in separate scopes

/*task clientTest(type: Test) {
    useJUnitPlatform {
        includeTags "client"
    }
}*/ //todo need to be segmented for different user flow and user stories

task bgRegistrationTest(type: Test) {
    useJUnitPlatform {
        includeTags "bg-registration"
    }
}


/*task apiTest(type: Test) {
    useJUnitPlatform {
        includeTags "api"
    }
}*/  //todo need to be segmented in separate scopes

task apiRegistrationTest(type: Test) {
    useJUnitPlatform {
        includeTags "api&registration"
    }
}

/*task webTest(type: Test) {
    useJUnitPlatform {
        includeTags "web"
    }
}*/ //todo need to be segmented in separate scopes

/*task webRepairTest(type: Test) {
    useJUnitPlatform {
        includeTags "web-repair"
    }
} */ //todo need to be segmented in separate scopes

task webRepairClientTest(type: Test) {
    useJUnitPlatform {
        includeTags "web-repair&client"
    }
}

task webRepairDispatcherTest(type: Test) {
    useJUnitPlatform {
        includeTags "web-repair&dispatcher"
    }
}

task webRepairMasterTest(type: Test) {
    useJUnitPlatform {
        includeTags "web-repair&master"
    }
}


task webRegistrationTest(type: Test) {
    useJUnitPlatform {
        includeTags "web-registration"
    }
}

task webConsultationTest(type: Test) {
    useJUnitPlatform {
        includeTags "web-consultation"
    }
}
task sampleWebTest(type: Test) {
    useJUnitPlatform {
        includeTags "sampleWebTest"
    }
}

task sampleApiTest(type: Test) {
    useJUnitPlatform {
        includeTags "sampleApiTest"
    }
}

